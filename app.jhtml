<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PJGE Creator #{com.panjohnny.pjge.PJGE.VERSION}</title>
</head>

<body>
    <header>
        <div class="top-menu">
            <em jhtml:src="com.panjohnny.pjge.app.FileMenu" name="File" items="Refresh, Exit" />
        </div>
    </header>

    <main>
        <div class="side" id="objects">
            <h3>Objects</h3>
        </div>
        <div class="center">
            <canvas id="canvas"></canvas>
        </div>
        <div class="side" id="">
            <h3>Inspector</h3>
        </div>
    </main>

    <dialog id="reconnect">
        <h2>Unable to connect to the backend server</h2>
        <p>Attempting to reconnect, please do not refresh the page...</p>
        <p class="small">This modal will close as soon as connection will be established</p>
    </dialog>
</body>

</html>

<style>
    @import url("/lib/shared.css");

    h3 {
        margin-top: 0px;
    }

    main {
        display: flex;
        flex-direction: row;
    }

    .side {
        width: 25%;
    }

    .center {
        width: auto;
        background-color: darkgrey;
    }
</style>

<script>
    /*
     ** Resizing stuff **
    */
   const 


    /*
     ** Menu stuff **
    */
    document.querySelectorAll(".menu").forEach(m => {
        m.addEventListener("mouseover", () => {
            m.querySelector("ul").hidden = false;
        })

        m.addEventListener("mouseout", () => {
            m.querySelector("ul").hidden = true;
        })
    });


    const menuItems = {
        "refresh": () => location.reload(),
        "exit": () => {
            executeCommand("SYSTEM.EXIT", null);
            location.href = "about://blank";
        },
    }

    function executeItem(id) {
        menuItems[id]();
    }

    /*
     ** WS stuff **
    */    
    let websocket;

    class Command {
        constructor(command) {
            this.raw = command;
            this.cacheUpdated = false;
            this.saved = null;
        }

        execute(args) {
            if (args) {
                executeCommand(this.raw + " " + args.concat(" "), this);
            }
            executeCommand(this.raw, this);
            return new Promise(async (resolve) => {
                async function waiting() {
                    await delay(100);
                    if (!getObjects.wasCacheUpdated()) {
                        waiting();
                    }
                }

                if (!getObjects.wasCacheUpdated()) {
                    await waiting();
                }

                getObjects.wasCacheUpdated(false);
                resolve(getObjects.getCache());
            })
        }

        cache(str) {
            this.saved = str;
            this.cacheUpdated = true;
        }

        wasCacheUpdated(val) {
            if (val !== undefined)
                this.cacheUpdated = val;
            return this.cacheUpdated;
        }

        getCache() {
            return this.saved;
        }
    }

    let commandQueue = [];

    setupWS();

    let consoleString = "";

    function setupWS() {
        websocket = new WebSocket("ws://localhost:1235");
        websocket.addEventListener("message", e => {
            if (e.data.startsWith("ERR")) {
                alert(e.data.substring(e.data.indexOf(" ")).trim())
            } else if (e.data.startsWith("RTR")) {
                commandQueue[0].cache(e.data.substring(e.data.indexOf(" ")).trim());
                commandQueue = commandQueue.slice(1);
            }
        });

        websocket.addEventListener("open", () => {
            const modal = document.querySelector("#reconnect");
            modal.close();
        });

        websocket.addEventListener("close", () => {
            const modal = document.querySelector("#reconnect");
            modal.showModal();

            setTimeout(setupWS, 2000);
        });
    }

    function executeCommand(cmd, obj) {
        if (websocket.readyState != WebSocket.OPEN)
            return;
        if (obj)
            commandQueue.push(obj);
        websocket.send(cmd);
    }

    function delay(time) {
        return new Promise(resolve => setTimeout(resolve, time));
    }
</script>